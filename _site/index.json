{
  "api/TestProject.AppArrayTests.html": {
    "href": "api/TestProject.AppArrayTests.html",
    "title": "Class AppArrayTests | Ase Assignment",
    "keywords": "Class AppArrayTests Namespace TestProject Assembly TestProject.dll Test class for the AppArray class in the ASE Assignment project. [TestFixture] public class AppArrayTests Inheritance object AppArrayTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeInstance() Tests that the constructor of AppArray initializes the instance successfully. [Test] public void Constructor_ShouldInitializeInstance() Setup() Sets up the test environment by initializing the AppArray instance. [SetUp] public void Setup()"
  },
  "api/TestProject.AppBooleanTests.html": {
    "href": "api/TestProject.AppBooleanTests.html",
    "title": "Class AppBooleanTests | Ase Assignment",
    "keywords": "Class AppBooleanTests Namespace TestProject Assembly TestProject.dll public class AppBooleanTests Inheritance object AppBooleanTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeAppBooleanInstance() Tests that the constructor of AppBool creates a valid instance. [Test] public void Constructor_ShouldInitializeAppBooleanInstance() Restrictions_ShouldNotThrowException() Verifies that the Restrictions() method does not throw any exceptions. [Test] public void Restrictions_ShouldNotThrowException()"
  },
  "api/TestProject.AppForTests.html": {
    "href": "api/TestProject.AppForTests.html",
    "title": "Class AppForTests | Ase Assignment",
    "keywords": "Class AppForTests Namespace TestProject Assembly TestProject.dll public class AppForTests Inheritance object AppForTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppFor_Constructor_CreatesInstance() Tests that the AppFor constructor creates an instance successfully. [Test] public void AppFor_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/TestProject.AppIfTests.html": {
    "href": "api/TestProject.AppIfTests.html",
    "title": "Class AppIfTests | Ase Assignment",
    "keywords": "Class AppIfTests Namespace TestProject Assembly TestProject.dll public class AppIfTests Inheritance object AppIfTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppIf_Constructor_CreatesInstance() Tests that the AppIf constructor creates an instance successfully. [Test] public void AppIf_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/TestProject.AppIntTests.html": {
    "href": "api/TestProject.AppIntTests.html",
    "title": "Class AppIntTests | Ase Assignment",
    "keywords": "Class AppIntTests Namespace TestProject Assembly TestProject.dll [TestFixture] public class AppIntTests Inheritance object AppIntTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppInt_Instance_Created_Successfully() Verifies that an instance of AppInt is created successfully. [Test] public void AppInt_Instance_Created_Successfully() Restrictions_DoesNotThrowException() Verifies that the Restrictions method does not throw an exception when called. [Test] public void Restrictions_DoesNotThrowException() SetUp() Sets up the test environment by initializing a new instance of AppInt. [SetUp] public void SetUp()"
  },
  "api/TestProject.AppRealTests.html": {
    "href": "api/TestProject.AppRealTests.html",
    "title": "Class AppRealTests | Ase Assignment",
    "keywords": "Class AppRealTests Namespace TestProject Assembly TestProject.dll Unit Tests for the AppReal class, verifying its behavior and functionality. [TestFixture] public class AppRealTests Inheritance object AppRealTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeInstance() Tests that the constructor of AppReal correctly initializes an instance. [Test] public void Constructor_ShouldInitializeInstance() Restrictions_ShouldNotThrowException() Tests that the Restrictions method does not throw any exceptions when called. [Test] public void Restrictions_ShouldNotThrowException() Setup() Sets up the test environment by initializing a new instance of AppReal. [SetUp] public void Setup()"
  },
  "api/TestProject.AppStoredProgramTests.html": {
    "href": "api/TestProject.AppStoredProgramTests.html",
    "title": "Class AppStoredProgramTests | Ase Assignment",
    "keywords": "Class AppStoredProgramTests Namespace TestProject Assembly TestProject.dll Unit tests for the AppStoredProgram class. [TestFixture] public class AppStoredProgramTests Inheritance object AppStoredProgramTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_InitializesSuccessfully() Verifies that the constructor initializes an instance of AppStoredProgram successfully. [Test] public void Constructor_InitializesSuccessfully() Run_WithInvalidCommand_ThrowsStoredProgramException() Verifies that running the program with invalid commands throws a BOOSE.StoredProgramException. [Test] public void Run_WithInvalidCommand_ThrowsStoredProgramException() Run_WithNoCommands_DoesNotThrow() Ensures that running the program with no commands does not throw any exceptions. [Test] public void Run_WithNoCommands_DoesNotThrow() Run_WithValidCommand_ExecutesSuccessfully() Tests that running the program with valid commands executes successfully. [Test] public void Run_WithValidCommand_ExecutesSuccessfully() SetUp() Sets up the test environment by initializing the AppStoredProgram instance. [SetUp] public void SetUp() TearDown() Cleans up the test environment by setting the AppStoredProgram instance as null after each test. [TearDown] public void TearDown()"
  },
  "api/TestProject.AppWhileTests.html": {
    "href": "api/TestProject.AppWhileTests.html",
    "title": "Class AppWhileTests | Ase Assignment",
    "keywords": "Class AppWhileTests Namespace TestProject Assembly TestProject.dll Unit tests for the AppWhile class. public class AppWhileTests Inheritance object AppWhileTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppWhile_Constructor_CreatesInstance() Tests that the AppWhile constructor creates an instance successfully. [Test] public void AppWhile_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/TestProject.Tests.html": {
    "href": "api/TestProject.Tests.html",
    "title": "Class Tests | Ase Assignment",
    "keywords": "Class Tests Namespace TestProject Assembly TestProject.dll public class Tests Inheritance object Tests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [SetUp] public void Setup() Test1() [Test] public void Test1()"
  },
  "api/TestProject.html": {
    "href": "api/TestProject.html",
    "title": "Namespace TestProject | Ase Assignment",
    "keywords": "Namespace TestProject Classes AppArrayTests Test class for the AppArray class in the ASE Assignment project. AppBooleanTests AppForTests AppIfTests AppIntTests AppRealTests Unit Tests for the AppReal class, verifying its behavior and functionality. AppStoredProgramTests Unit tests for the AppStoredProgram class. AppWhileTests Unit tests for the AppWhile class. Tests"
  },
  "api/WinFormsApp2.AppArray.html": {
    "href": "api/WinFormsApp2.AppArray.html",
    "title": "Class AppArray | Ase Assignment",
    "keywords": "Class AppArray Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a specialized implementation of the BOOSE.Array class. Provides additional functionality and custom restrictions for array operations. public class AppArray : Array, ICommand Inheritance object Command Evaluation Array AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.Compile() Array.Execute() Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Methods ArrayRestriction() Removes specific restrictions previously applied to the array operations. Currently, the method does not implement any restriction logic. public void ArrayRestriction() CheckParameters(string[]) Validates the parameters provided to the array operation. Ensures that the number of parameters is either 3 or 4. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameter strings representing the array operation. Exceptions CommandException Thrown when the number of parameters is invalid (not 3 or 4). ProcessArrayParametersCompile(bool) Processes the parameters for the array during compilation. Determines if the operation is a \"peek\" or \"poke\" and extracts necessary details. protected override void ProcessArrayParametersCompile(bool peekOrPoke) Parameters peekOrPoke bool Indicates whether the operation is a peek (true) or poke (false) on the array. Exceptions CommandException Thrown when the command structure is invalid, or if the specified variable does not exist. Exception Thrown if there is an error while processing the array compile."
  },
  "api/WinFormsApp2.AppBool.html": {
    "href": "api/WinFormsApp2.AppBool.html",
    "title": "Class AppBool | Ase Assignment",
    "keywords": "Class AppBool Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a custom Boolean class that extends BOOSE.Boolean. This class can be customized to implement specific Boolean logic and restrictions. public class AppBool : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBool Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppBool() Initializes a new instance of the AppBool class. public AppBool() Methods Restrictions() Applies restrictions to the Boolean logic. Override this method to implement any specific restrictions or behavior related to Boolean operations. public override void Restrictions()"
  },
  "api/WinFormsApp2.AppCanvas.html": {
    "href": "api/WinFormsApp2.AppCanvas.html",
    "title": "Class AppCanvas | Ase Assignment",
    "keywords": "Class AppCanvas Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a custom canvas for drawing shapes, lines, and text. Implements the BOOSE.ICanvas interface for custom canvas functionality. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class. Sets the canvas size, and initializes the pen color and graphics object. public AppCanvas() Properties Instance Gets the singleton instance of the AppCanvas class. Ensures only one instance of AppCanvas is used throughout the application. public static AppCanvas Instance { get; } Property Value AppCanvas PenColour Gets or sets the color of the pen. public object PenColour { get; set; } Property Value object Xpos Gets or sets the X-coordinate position of the pen. public int Xpos { get; set; } Property Value int Ypos Gets or sets the Y-coordinate position of the pen. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle at the current pen position. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool Indicates if the circle should be filled. Clear() Clears the canvas by filling it with white color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to the specified coordinates. public void DrawTo(int x, int y) Parameters x int The X-coordinate of the endpoint. y int The Y-coordinate of the endpoint. MoveTo(int, int) Moves the pen to a specified position without drawing. public void MoveTo(int x, int y) Parameters x int The X-coordinate to move the pen. y int The Y-coordinate to move the pen. Rect(int, int, bool) Draws a rectangle at the current pen position. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates if the rectangle should be filled. Reset() Resets the pen position to (0, 0). public void Reset() Set(int, int) Sets the size of the canvas. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. SetBitmap(Bitmap) Sets the current bitmap for the canvas. public void SetBitmap(Bitmap bitmap) Parameters bitmap Bitmap The new bitmap to set. SetColour(int, int, int) Sets the pen color using RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component (0-255). green int The green component (0-255). blue int The blue component (0-255). Exceptions CanvasException Thrown when any RGB component is out of range. Tri(int, int) Draws a triangle at the current position. public void Tri(int width, int height) Parameters width int The width of the triangle base. height int The height of the triangle. WriteText(string) Writes text at the current position. public void WriteText(string text) Parameters text string The text to be written. getBitmap() Returns the current bitmap representing the canvas. public object getBitmap() Returns object The current bitmap object."
  },
  "api/WinFormsApp2.AppCircle.html": {
    "href": "api/WinFormsApp2.AppCircle.html",
    "title": "Class AppCircle | Ase Assignment",
    "keywords": "Class AppCircle Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a command for drawing a circle on a canvas, with an option to fill it. Inherits from the BOOSE.Circle class and adds functionality for filled circles. public class AppCircle : Circle, ICommand Inheritance object Command CanvasCommand CommandOneParameter Circle AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Initializes a new instance of the AppCircle class with default parameters. The circle will not be filled by default. public AppCircle() AppCircle(Canvas, int, bool) Initializes a new instance of the AppCircle class with specified parameters. public AppCircle(Canvas c, int radius, bool filled = false) Parameters c Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. filled bool Indicates whether the circle should be filled. Default is false. Methods CheckParameters(string[]) Validates the parameters passed to the circle command. Ensures the correct number of parameters and verifies the fill parameter is a valid boolean. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing the parameters passed to the circle command. Exceptions CommandException Thrown if the number of parameters is invalid or the filled parameter is not a valid boolean. Execute() Executes the command to draw a circle on the canvas. This method calls the base class's Execute method and draws the circle with the specified radius and fill status. public override void Execute() Exceptions CommandException Thrown if there is an error during execution, such as an invalid canvas or parameters."
  },
  "api/WinFormsApp2.AppClear.html": {
    "href": "api/WinFormsApp2.AppClear.html",
    "title": "Class AppClear | Ase Assignment",
    "keywords": "Class AppClear Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a command to clear the canvas in the ASE assignment. This command clears all drawings and resets the canvas to its default state. public class AppClear : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppClear Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed to the clear command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the command parameters. Remarks The clear command does not require any parameters. This validation ensures that no unexpected inputs are provided. Exceptions CommandException Thrown when the parameter array is empty, indicating invalid or missing input. Execute() Executes the command to clear the canvas. public override void Execute() Remarks This method invokes the BOOSE.Canvas.Clear() method to remove all drawings on the canvas."
  },
  "api/WinFormsApp2.AppCommandFactory.html": {
    "href": "api/WinFormsApp2.AppCommandFactory.html",
    "title": "Class AppCommandFactory | Ase Assignment",
    "keywords": "Class AppCommandFactory Namespace WinFormsApp2 Assembly WinFormsApp2.dll Factory class responsible for creating specific command instances based on the command type. Inherits from BOOSE.CommandFactory. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates and returns an instance of a command based on the provided command type. public override ICommand MakeCommand(string commandType) Parameters commandType string The type of command to create (e.g., \"write\", \"triangle\"). Returns ICommand An instance of BOOSE.ICommand corresponding to the specified command type. Remarks This method checks the given commandType and returns the appropriate command instance. If the commandType is not found, the base MakeCommand(string) method is called. Exceptions ArgumentException Thrown if the command type is not recognized."
  },
  "api/WinFormsApp2.AppCompoundCommand.html": {
    "href": "api/WinFormsApp2.AppCompoundCommand.html",
    "title": "Class AppCompoundCommand | Ase Assignment",
    "keywords": "Class AppCompoundCommand Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a compound command that is linked to a specific conditional command. Inherits from AppConditionalCommand. public class AppCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand Implements ICommand Derived AppElse Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCompoundCommand() Initializes a new instance of the AppCompoundCommand class. public AppCompoundCommand() Properties CorrCommand Gets or sets the corresponding conditional command for this compound command. public ConditionalCommand CorrCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the parameters passed to the compound command. Ensures the number of parameters and their content are correct. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters passed to the command. Remarks The compound command should receive exactly one parameter, which must contain a valid end marker such as \"endif\", \"endwhile\", \"endfor\", or \"endmethod\". If these conditions are not met, an exception is thrown. Exceptions CommandException Thrown if the number of parameters is incorrect or if the content is invalid. Execute() Executes the compound command by calling the base class's Execute method and resetting the count to 0. public override void Execute() Remarks This method invokes the base class's Execute() method and ensures the internal count is reset to 0 after execution. ResetCount(int) Resets the count in the BOOSE.Boolean class by accessing its private static field. This method uses reflection to manipulate the private static field \"뇀\" in the BOOSE.Boolean class. public void ResetCount(int newVal) Parameters newVal int The new value to set for the count. Remarks The method uses reflection to set the value of the private static field \"뇀\" in the BOOSE.Boolean class. This allows the resetting of a hidden internal counter, which may be used for various boolean-related operations. Exceptions BOOSEException Thrown if the field \"뇀\" cannot be accessed or the value cannot be set."
  },
  "api/WinFormsApp2.AppConditionalCommand.html": {
    "href": "api/WinFormsApp2.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | Ase Assignment",
    "keywords": "Class AppConditionalCommand Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a conditional command that is responsible for resetting the internal counter. Inherits from BOOSE.ConditionalCommand. public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived AppCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command, and after execution, resets the counter to 0. public override void Execute() Remarks The method calls the base class's BOOSE.ConditionalCommand.Execute() method to perform the execution of the conditional command, and after execution, it invokes the ResetCount(int) method to reset the internal static counter to zero. Exceptions BOOSEException Thrown if there is an error in resetting the internal counter. ResetCount(int) Resets the internal static counter in the BOOSE.Boolean class. This method uses reflection to access the private static field \"뇀\" in the BOOSE.Boolean class. public void ResetCount(int newVal) Parameters newVal int The new value to set for the static counter. Remarks This method utilizes reflection to access a private static field named \"뇀\" in the BOOSE.Boolean class. The field is assumed to be used as an internal counter, and its value can be reset by calling this method. Exceptions BOOSEException Thrown if the private field \"뇀\" cannot be accessed or if the value cannot be set."
  },
  "api/WinFormsApp2.AppElse.html": {
    "href": "api/WinFormsApp2.AppElse.html",
    "title": "Class AppElse | Ase Assignment",
    "keywords": "Class AppElse Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents an Else command that works in conjunction with conditional statements (e.g., If/Else). Inherits from AppCompoundCommand and includes functionality to handle the Else logic. public class AppElse : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppElse Implements ICommand Inherited Members AppCompoundCommand.CorrCommand AppCompoundCommand.ResetCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrEnd Gets or sets the corresponding End command that marks the end of the Else block. public End CorrEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters for the Else command. Ensures that exactly one parameter is provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters to validate. Remarks This method checks if the Else command is passed exactly one parameter, and throws an exception if the number of parameters is not valid. Exceptions CommandException Thrown if the number of parameters is invalid. Compile() Compiles the Else command by setting the corresponding command, line numbers, and pushing the command onto the program stack. public override void Compile() Remarks This method links the Else command to its corresponding conditional statement (such as an If or While), sets the current line number, and stores the end line number of the block. Exceptions Exception Thrown if an error occurs during compilation. Execute() Executes the Else command. If the corresponding command condition is true, it sets the program counter to the end line number. public override void Execute() Remarks This method evaluates the condition associated with the Else command. If the condition is true, the program jumps to the end of the block."
  },
  "api/WinFormsApp2.AppEnd.html": {
    "href": "api/WinFormsApp2.AppEnd.html",
    "title": "Class AppEnd | Ase Assignment",
    "keywords": "Class AppEnd Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"End\" command, which is responsible for terminating a compound command block. Inherits from BOOSE.End. public class AppEnd : End, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand End AppEnd Implements ICommand Inherited Members End.Compile() End.Execute() CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class and calls the ReduceRestrictions method. public AppEnd() Remarks The constructor calls the base class's constructor and invokes the ReduceRestrictions method to configure restrictions for the command. Methods Restrictions() Defines the restrictions for the \"End\" command. This method is intentionally left empty, as the specific restrictions for \"End\" are handled elsewhere. public override void Restrictions() Remarks This method does not implement any specific restrictions for the \"End\" command. The restrictions are defined in other parts of the program."
  },
  "api/WinFormsApp2.AppFor.html": {
    "href": "api/WinFormsApp2.AppFor.html",
    "title": "Class AppFor | Ase Assignment",
    "keywords": "Class AppFor Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"For\" command, which is responsible for looping a specified number of times. Inherits from BOOSE.For. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.Execute() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppFor() Initializes a new instance of the AppFor class. public AppFor() Remarks This constructor does not perform any specific initialization for the \"For\" command. Methods Restrictions() Defines the restrictions for the \"For\" command. This method is intentionally left empty for the current implementation. public override void Restrictions() Remarks The specific restrictions for the \"For\" command are not implemented here and may be handled elsewhere."
  },
  "api/WinFormsApp2.AppIf.html": {
    "href": "api/WinFormsApp2.AppIf.html",
    "title": "Class AppIf | Ase Assignment",
    "keywords": "Class AppIf Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"If\" command, which is responsible for executing a block of code based on a conditional statement. Inherits from BOOSE.If. public class AppIf : If, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand If AppIf Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. This constructor calls the ReduceRestrictions method to reduce the restrictions on the \"If\" command. public AppIf() Methods Restrictions() Defines the restrictions for the \"If\" command. This method is intentionally left empty for the current implementation. public override void Restrictions() Remarks The specific restrictions for the \"If\" command are not implemented here and may be handled elsewhere."
  },
  "api/WinFormsApp2.AppInt.html": {
    "href": "api/WinFormsApp2.AppInt.html",
    "title": "Class AppInt | Ase Assignment",
    "keywords": "Class AppInt Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"Int\" command, used to define an integer variable in the program. Inherits from BOOSE.Int. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppInt() Initializes a new instance of the AppInt class. public AppInt() Methods Restrictions() Defines the restrictions for the \"Int\" command. This method is intentionally left empty for the current implementation. public override void Restrictions()"
  },
  "api/WinFormsApp2.AppMethod.html": {
    "href": "api/WinFormsApp2.AppMethod.html",
    "title": "Class AppMethod | Ase Assignment",
    "keywords": "Class AppMethod Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"Method\" command, used to define a method in the program. Inherits from BOOSE.Method. public class AppMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMethod() Initializes a new instance of the AppMethod class. Resets the count to 0 during initialization by calling ResetCount(int). public AppMethod() Methods Execute() Executes the method by invoking the base class's Execute() method. After execution, resets the internal static count to 0 in the BOOSE.Boolean class. public override void Execute() ResetCount(int) Resets the static count in the BOOSE.Boolean class by accessing its private static field \"뇀\". public void ResetCount(int newVal) Parameters newVal int The new value to set for the static count field \"뇀\". Exceptions BOOSEException Thrown when the private static field \"뇀\" cannot be accessed or updated due to reflection issues."
  },
  "api/WinFormsApp2.AppMoveTo.html": {
    "href": "api/WinFormsApp2.AppMoveTo.html",
    "title": "Class AppMoveTo | Ase Assignment",
    "keywords": "Class AppMoveTo Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a command to move to a specific point on the canvas. Inherits from BOOSE.CanvasCommand to interact with the canvas. public class AppMoveTo : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppMoveTo Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.Execute() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the move-to command. This method is not yet implemented. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters representing the coordinates to move to. Exceptions NotImplementedException Thrown when the method is called, as it is not yet implemented."
  },
  "api/WinFormsApp2.AppParser.html": {
    "href": "api/WinFormsApp2.AppParser.html",
    "title": "Class AppParser | Ase Assignment",
    "keywords": "Class AppParser Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a parser responsible for interpreting and processing commands. Inherits from BOOSE.Parser and utilizes a command factory and stored program. public class AppParser : Parser, IParser Inheritance object Parser AppParser Implements IParser Inherited Members Parser.ParseCommand(string) Parser.ParseProgram(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppParser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class. public AppParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory used to create commands. program StoredProgram The stored program containing commands."
  },
  "api/WinFormsApp2.AppPeek.html": {
    "href": "api/WinFormsApp2.AppPeek.html",
    "title": "Class AppPeek | Ase Assignment",
    "keywords": "Class AppPeek Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"Peek\" command that interacts with array elements. Inherits from AppArray and handles parameter validation, compilation, and execution of the Peek operation. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation Array AppArray AppPeek Implements ICommand Inherited Members AppArray.ArrayRestriction() AppArray.ProcessArrayParametersCompile(bool) Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters provided for the Peek command. Ensures that the correct number of parameters is passed (2 or 3). public override void CheckParameters(string[] Parameters) Parameters Parameters string[] An array of strings representing the parameters passed to the command. Exceptions CommandException Thrown if the number of parameters is not 2 or 3, indicating an invalid command format. Compile() Compiles the Peek command, processing array parameters for the Peek operation. public override void Compile() Exceptions Exception Thrown if an error occurs during the compilation process, specifically during the array parameter processing. Execute() Executes the Peek operation, updating variables based on the Peek command's parameters. Handles different data types like 'int' and 'real'. public override void Execute() Exceptions CommandException Thrown if there is an invalid data type provided or an error during execution."
  },
  "api/WinFormsApp2.AppPoke.html": {
    "href": "api/WinFormsApp2.AppPoke.html",
    "title": "Class AppPoke | Ase Assignment",
    "keywords": "Class AppPoke Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the \"Poke\" command that interacts with array elements by setting values. Inherits from AppArray and handles parameter validation, compilation, and execution of the Poke operation. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation Array AppArray AppPoke Implements ICommand Inherited Members AppArray.ArrayRestriction() AppArray.ProcessArrayParametersCompile(bool) Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters provided for the Poke command. Ensures that the correct number of parameters is passed (2 or 3). public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters passed to the command. Exceptions CommandException Thrown if the number of parameters is not 2 or 3, indicating an invalid command format. Compile() Compiles the Poke command by processing array parameters in the appropriate mode (Poke). public override void Compile() Exceptions Exception Thrown if an error occurs during the compilation process, specifically during the array parameter processing. Execute() Executes the Poke operation, updating the array or variable with the Poke command's parameters. public override void Execute() Exceptions Exception Thrown if an error occurs during the execution of the Poke command. Set(StoredProgram, string) Sets the program and parameters for the Poke command. public override void Set(StoredProgram Program, string Params) Parameters Program StoredProgram The program to which the command applies. Params string The parameters associated with the Poke operation. Exceptions Exception Thrown if an error occurs while setting up the Poke command with the program and parameters."
  },
  "api/WinFormsApp2.AppReal.html": {
    "href": "api/WinFormsApp2.AppReal.html",
    "title": "Class AppReal | Ase Assignment",
    "keywords": "Class AppReal Namespace WinFormsApp2 Assembly WinFormsApp2.dll public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReal() Initializes a new instance of the AppReal class. This class is responsible for handling real numbers in the program. public AppReal() Methods Restrictions() Enforces restrictions on the usage of variables. In this case, restrictions have been removed, so no action is taken. public override void Restrictions()"
  },
  "api/WinFormsApp2.AppRect.html": {
    "href": "api/WinFormsApp2.AppRect.html",
    "title": "Class AppRect | Ase Assignment",
    "keywords": "Class AppRect Namespace WinFormsApp2 Assembly WinFormsApp2.dll public class AppRect : Rect, ICommand Inheritance object Command CanvasCommand CommandOneParameter Rect AppRect Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRect() Initializes a default instance of the AppRect class. This constructor sets the rectangle as unfilled by default. public AppRect() AppRect(Canvas, int, int, bool) Initializes a new instance of the AppRect class with the specified parameters. public AppRect(Canvas c, int width, int height, bool filled = false) Parameters c Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle should be filled or not. Defaults to false if not provided. Methods CheckParameters(string[]) Validates the parameters passed to the rectangle drawing command. Ensures the correct number of parameters and a valid \"filled\" status. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided to the command. Exceptions CommandException Thrown if the number of parameters is incorrect or the \"filled\" parameter is invalid. Execute() Executes the rectangle drawing command on the canvas. public override void Execute() Exceptions CommandException Thrown if execution fails due to invalid parameters."
  },
  "api/WinFormsApp2.AppReset.html": {
    "href": "api/WinFormsApp2.AppReset.html",
    "title": "Class AppReset | Ase Assignment",
    "keywords": "Class AppReset Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a command to reset the canvas in the ASE assignment. public class AppReset : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppReset Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the reset operation. Ensures that no parameters are passed, as the reset command does not require any. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the command parameters. Exceptions CommandException Thrown if the parameter array is not empty, indicating invalid input. Execute() Executes the reset operation on the canvas, clearing its contents. public override void Execute()"
  },
  "api/WinFormsApp2.AppStoredProgram.html": {
    "href": "api/WinFormsApp2.AppStoredProgram.html",
    "title": "Class AppStoredProgram | Ase Assignment",
    "keywords": "Class AppStoredProgram Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a stored program that executes a sequence of commands. Inherits from BOOSE.StoredProgram and includes additional canvas functionality. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.SyntaxOk StoredProgram.AddMethod(Method) StoredProgram.GetMethod(string) StoredProgram.AddVariable(Evaluation) StoredProgram.GetVariable(string) StoredProgram.GetVariable(int) StoredProgram.FindVariable(Evaluation) StoredProgram.FindVariable(string) StoredProgram.VariableExists(string) StoredProgram.GetVarValue(string) StoredProgram.UpdateVariable(string, int) StoredProgram.UpdateVariable(string, double) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.PC ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with the specified canvas. This constructor sets up the canvas and resets the program to its initial state. public AppStoredProgram(ICanvas canvas) Parameters canvas ICanvas The canvas used for drawing or displaying content. Methods Run() Executes the stored program by iterating through the commands in sequence. It processes each command and catches any execution errors. public override void Run() Exceptions StoredProgramException Thrown if a command execution fails due to a BOOSE.BOOSEException."
  },
  "api/WinFormsApp2.AppTri.html": {
    "href": "api/WinFormsApp2.AppTri.html",
    "title": "Class AppTri | Ase Assignment",
    "keywords": "Class AppTri Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a command to draw a triangle on the canvas. This command requires two parameters: the base length and the height of the triangle. public class AppTri : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppTri Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppTri() Initializes a new instance of the AppTri class. public AppTri() AppTri(Canvas, int, int) Initializes a new instance of the AppTri class with specified canvas, base length, and height. public AppTri(Canvas c, int baseLength, int height) Parameters c Canvas The canvas to draw on. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates and sets the parameters required to draw a triangle. The parameters should consist of two integers: the base and the height of the triangle. public override void CheckParameters(string[] parameters) Parameters parameters string[] Array of parameters containing base length and height. Exceptions ArgumentException Thrown when the parameter count is invalid or parameters are not integers. Execute() Executes the command to draw a triangle on the canvas. This method attempts to draw a triangle using the provided base and height values. public override void Execute() Exceptions CanvasException Thrown when there is an error drawing the triangle."
  },
  "api/WinFormsApp2.AppWhile.html": {
    "href": "api/WinFormsApp2.AppWhile.html",
    "title": "Class AppWhile | Ase Assignment",
    "keywords": "Class AppWhile Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a custom \"While\" command that extends the base BOOSE.While class. public class AppWhile : While, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand While AppWhile Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. Calls ReduceRestrictions to handle any setup defined by the base class. public AppWhile() Methods Restrictions() Override of the Restrictions method. Currently left empty, but can be expanded to include custom restrictions for this command. public override void Restrictions()"
  },
  "api/WinFormsApp2.AppWriteText.html": {
    "href": "api/WinFormsApp2.AppWriteText.html",
    "title": "Class AppWriteText | Ase Assignment",
    "keywords": "Class AppWriteText Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents a command to write text to the canvas. This command takes a single parameter - the text to write. public class AppWriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppWriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWriteText() Initializes a new instance of the AppWriteText class. public AppWriteText() AppWriteText(Canvas, string) Initializes a new instance of the AppWriteText class with specified canvas and text. public AppWriteText(Canvas c, string text) Parameters c Canvas The canvas to draw on. text string The text to write on the canvas. Methods CheckParameters(string[]) Validates the parameters for the WriteText command. Ensures that text is provided and is not empty. public override void CheckParameters(string[] Parameters) Parameters Parameters string[] The array of parameters to check. Exceptions ArgumentException Thrown when no text is provided for the WriteText command. Execute() Executes the command to write text to the canvas. This method checks for validity and updates the text expression before writing it. public override void Execute() Exceptions InvalidOperationException Thrown when the canvas is not set or the text is empty or null."
  },
  "api/WinFormsApp2.Form1.html": {
    "href": "api/WinFormsApp2.Form1.html",
    "title": "Class Form1 | Ase Assignment",
    "keywords": "Class Form1 Namespace WinFormsApp2 Assembly WinFormsApp2.dll Represents the main form of the ASE drawing application. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. Sets up the canvas, command factory, stored program, and parser. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/WinFormsApp2.html": {
    "href": "api/WinFormsApp2.html",
    "title": "Namespace WinFormsApp2 | Ase Assignment",
    "keywords": "Namespace WinFormsApp2 Classes AppArray Represents a specialized implementation of the BOOSE.Array class. Provides additional functionality and custom restrictions for array operations. AppBool Represents a custom Boolean class that extends BOOSE.Boolean. This class can be customized to implement specific Boolean logic and restrictions. AppCanvas Represents a custom canvas for drawing shapes, lines, and text. Implements the BOOSE.ICanvas interface for custom canvas functionality. AppCircle Represents a command for drawing a circle on a canvas, with an option to fill it. Inherits from the BOOSE.Circle class and adds functionality for filled circles. AppClear Represents a command to clear the canvas in the ASE assignment. This command clears all drawings and resets the canvas to its default state. AppCommandFactory Factory class responsible for creating specific command instances based on the command type. Inherits from BOOSE.CommandFactory. AppCompoundCommand Represents a compound command that is linked to a specific conditional command. Inherits from AppConditionalCommand. AppConditionalCommand Represents a conditional command that is responsible for resetting the internal counter. Inherits from BOOSE.ConditionalCommand. AppElse Represents an Else command that works in conjunction with conditional statements (e.g., If/Else). Inherits from AppCompoundCommand and includes functionality to handle the Else logic. AppEnd Represents the \"End\" command, which is responsible for terminating a compound command block. Inherits from BOOSE.End. AppFor Represents the \"For\" command, which is responsible for looping a specified number of times. Inherits from BOOSE.For. AppIf Represents the \"If\" command, which is responsible for executing a block of code based on a conditional statement. Inherits from BOOSE.If. AppInt Represents the \"Int\" command, used to define an integer variable in the program. Inherits from BOOSE.Int. AppMethod Represents the \"Method\" command, used to define a method in the program. Inherits from BOOSE.Method. AppMoveTo Represents a command to move to a specific point on the canvas. Inherits from BOOSE.CanvasCommand to interact with the canvas. AppParser Represents a parser responsible for interpreting and processing commands. Inherits from BOOSE.Parser and utilizes a command factory and stored program. AppPeek Represents the \"Peek\" command that interacts with array elements. Inherits from AppArray and handles parameter validation, compilation, and execution of the Peek operation. AppPoke Represents the \"Poke\" command that interacts with array elements by setting values. Inherits from AppArray and handles parameter validation, compilation, and execution of the Poke operation. AppReal AppRect AppReset Represents a command to reset the canvas in the ASE assignment. AppStoredProgram Represents a stored program that executes a sequence of commands. Inherits from BOOSE.StoredProgram and includes additional canvas functionality. AppTri Represents a command to draw a triangle on the canvas. This command requires two parameters: the base length and the height of the triangle. AppWhile Represents a custom \"While\" command that extends the base BOOSE.While class. AppWriteText Represents a command to write text to the canvas. This command takes a single parameter - the text to write. Form1 Represents the main form of the ASE drawing application."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Ase Assignment",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Ase Assignment",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Ase Assignment",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}